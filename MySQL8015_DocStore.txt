## Preparations
# Download MySQL Server
 https://dev.mysql.com/downloads/mysql/
 -> Compressed TAR Archive

# Download MySQL Shell
 https://dev.mysql.com/downloads/shell/
 -> Compressed TAR Archive

# Download sample database, world_x 
 http://downloads.mysql.com/docs/world_x-db.tar.gz
 -> TGZ world_x-db.tar.gz

# Uncompress tar files
tar xf mysql-8.0.15-macos10.14-x86_64.tar 
tar xf mysql-shell-8.0.15-macos10.14-x86-64bit.tar 

# Set PATH
# *You may/can use other directory than /mysql
export PATH=/mysql/mysql-8.0.15-macos10.14-x86_64/bin:/mysql/mysql-shell-8.0.15-macos10.14-x86-64bit/bin:$PATH


## Deploy MySQL Server from MySQL Shell
# Boot MySQL Shell
mysqlsh

# In MySQL Shell, deploy MySQL Server
# MySQL Server will use TCP/IP port 3310 and 33100
# No password required
dba.deploySandboxInstance(3310)


## Load sample database, world_x
# *From another terminal window, or exit from MySQL Shell
# *You may/can use other directory than /mysql
mysqlsh -u root --port=3310 --sql < /mysql/world_x-db/world_x.sql


## Now you are ready to play with MySQL Document Store ##


## Demo from MySQL Shell
# Connect to MySQL Server from MySQL Shell
# NOTE: Use 33100 port for X DevAPI, NOT 3310 of legacy protocol
shell.connect('root@localhost:33100');

# Retrieve data from JSON Document
session.getSchema('world_x').getCollection('countryinfo').find().limit(2);

# Use variables and fetch data
colCI = session.getSchema('world_x').getCollection('countryinfo');

colCI.find("Name LIKE 'J%'").limit(2);

# Get Population and Surface Area of Asian countries starting with J
colCI.find("Name LIKE 'J%' AND geography.Continent = 'Asia'").fields("Name AS Name", "demographics.Population AS Continent", "geography.SurfaceArea AS SurfaceArea");


## Get same result with SQL
# Switch to SQL mode of MySQL Shell
\sql

use world_x;

# Same result with X Dev API example
# Get Population and Surface Area of Asian countries starting with J
# Result set in table format
SELECT doc->>'$.Name' AS Name, doc->>'$.demographics.Population' AS Population, doc->>'$.geography.SurfaceArea' AS SurfaceArea FROM countryinfo WHERE doc->>'$.Name' LIKE "J%" AND doc->>'$.geography.Continent' = 'Asia';

# Get Population and Surface Area of Asian countries starting with J
# Result set in JSON
SELECT JSON_OBJECT("Name", doc->>'$.Name', "Population", doc->>'$.demographics.Population', "SurfaceArea", doc->>'$.geography.SurfaceArea') AS results FROM countryinfo WHERE doc->>'$.Name' LIKE "J%" AND doc->>'$.geography.Continent' = 'Asia';


# Comparing JSON Functions and JSON Operator ->>
SELECT countryinfo.doc->'$.Name'
	FROM countryinfo WHERE _id = "JPN";

SELECT countryinfo.doc->>'$.Name'
	FROM countryinfo WHERE _id = "JPN";

SELECT JSON_EXTRACT(countryinfo.doc, '$.Name')
	FROM countryinfo WHERE _id = "JPN";

SELECT JSON_UNQUOTE(JSON_EXTRACT(countryinfo.doc, '$.Name'))
	FROM countryinfo WHERE _id = "JPN";


## JOIN Table and JSON Document 
# Check data of each tables
SELECT * FROM countryinfo WHERE _id = "JPN";
SELECT * FROM country WHERE Code = "JPN";
SELECT * FROM city WHERE CountryCode = "JPN" AND Name = "Tokyo";

# Let's JOIN 3 tables with 2 JSON Documents inside
# "how much concentration of the population to the capital?"

# Result set in table format
SELECT
	country.Name AS "Country",
	city.Name AS "Capital", 
	round(city.Info->>'$.Population'/countryinfo.doc->>'$.demographics.Population'*100, 2) AS "Percent"
FROM
	countryinfo, city, country
WHERE
	country.Name LIKE "J%"
	AND
	countryinfo.doc->>'$.geography.Continent' = 'Asia'
    AND
	countryinfo.doc->>'$.Name'= country.Name
	AND
	country.Capital = city.ID
;

# Result set in JSON
SELECT
	JSON_OBJECT(
	"Country", country.Name,
        "Capital", city.Name,
        "Percent", round(city.Info->>'$.Population'/countryinfo.doc->>'$.demographics.Population'*100, 2)
        ) AS Results
FROM
	countryinfo, city, country
WHERE
	country.Name LIKE "J%"
	AND
	countryinfo.doc->>'$.geography.Continent' = 'Asia'
    AND
	countryinfo.doc->>'$.Name'= country.Name
	AND
	country.Capital = city.ID
;

